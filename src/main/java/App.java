
import static spark.Spark.*;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.smartcar.sdk.*;
import com.smartcar.sdk.data.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author enta
 */
public class App extends javax.swing.JFrame {

    private final AuthClient client;
    private String access;
    private static Gson gson = new Gson();
    private String latLong ="";
                 private   String make = "";
               private  String model = "";
               private  String year = "";


    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        port(8000);
        String clientId = "4a1a1394-4854-486e-8859-78c12d175164";
        String clientSecret = "cbd545c6-9793-41c2-a612-4dc1afa887e0";
        String redirectUri = "http://localhost:8000/callback";
        String[] scope = {"read_engine_oil read_battery read_charge read_fuel read_location control_security read_odometer read_tires read_vehicle_info read_vin"};

        boolean testMode = true;

        client = new AuthClient(
                clientId,
                clientSecret,
                redirectUri,
                scope,
                testMode
        );
        CarController cc = new CarController();
        cc.getAccess(client);
        access = System.getProperty("access");
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        PLogin = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        resLogin = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        BLogin = new javax.swing.JButton();
        PVehicles = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ResVehicles = new javax.swing.JTextArea();
        BVehicles = new javax.swing.JButton();
        PVehicle = new javax.swing.JPanel();
        BVehicle = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ResVehicle = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        IdVehicle = new javax.swing.JTextField();
        BReset = new javax.swing.JButton();
        BMapa = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        ResID = new javax.swing.JTextArea();
        BCarro = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        resLogin.setColumns(20);
        resLogin.setRows(5);
        jScrollPane2.setViewportView(resLogin);

        jLabel1.setText("FaÃ§a seu login aqui ===>");

        BLogin.setText("Login");
        BLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PLoginLayout = new javax.swing.GroupLayout(PLogin);
        PLogin.setLayout(PLoginLayout);
        PLoginLayout.setHorizontalGroup(
            PLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(PLoginLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 279, Short.MAX_VALUE))
        );
        PLoginLayout.setVerticalGroup(
            PLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(BLogin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(195, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Login", PLogin);

        jLabel2.setText("Mostrar lista de carros:");

        ResVehicles.setEditable(false);
        ResVehicles.setColumns(20);
        ResVehicles.setRows(5);
        jScrollPane1.setViewportView(ResVehicles);

        BVehicles.setText("Listar");
        BVehicles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BVehiclesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PVehiclesLayout = new javax.swing.GroupLayout(PVehicles);
        PVehicles.setLayout(PVehiclesLayout);
        PVehiclesLayout.setHorizontalGroup(
            PVehiclesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PVehiclesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PVehiclesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PVehiclesLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BVehicles)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        PVehiclesLayout.setVerticalGroup(
            PVehiclesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PVehiclesLayout.createSequentialGroup()
                .addGroup(PVehiclesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(BVehicles))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Vehicles", PVehicles);

        BVehicle.setText("Procurar");
        BVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BVehicleActionPerformed(evt);
            }
        });

        ResVehicle.setEditable(false);
        ResVehicle.setColumns(20);
        ResVehicle.setRows(5);
        jScrollPane3.setViewportView(ResVehicle);

        jLabel3.setText("ID do Carro:");

        BReset.setText("Reset");
        BReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BResetActionPerformed(evt);
            }
        });

        BMapa.setText("Ver no Mapa");
        BMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMapaActionPerformed(evt);
            }
        });

        ResID.setColumns(20);
        ResID.setRows(5);
        jScrollPane4.setViewportView(ResID);

        BCarro.setText("Ver imagem do modelo");
        BCarro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCarroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PVehicleLayout = new javax.swing.GroupLayout(PVehicle);
        PVehicle.setLayout(PVehicleLayout);
        PVehicleLayout.setHorizontalGroup(
            PVehicleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PVehicleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IdVehicle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BVehicle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BReset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BMapa)
                .addGap(8, 8, 8))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PVehicleLayout.createSequentialGroup()
                .addComponent(jScrollPane3)
                .addContainerGap())
            .addGroup(PVehicleLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BCarro)
                .addContainerGap(102, Short.MAX_VALUE))
        );
        PVehicleLayout.setVerticalGroup(
            PVehicleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PVehicleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PVehicleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BVehicle)
                    .addComponent(jLabel3)
                    .addComponent(IdVehicle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BReset)
                    .addComponent(BMapa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PVehicleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addGroup(PVehicleLayout.createSequentialGroup()
                        .addComponent(BCarro)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Vehicle", PVehicle);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(247, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void BVehicleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BVehicleActionPerformed

        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\rober\\AppData\\Local\\Temp\\access.txt"));
            access = brTest.readLine();
            try {
                SmartcarResponse<VehicleIds> vehicleIdResponse = AuthClient.getVehicleIds(access);
                String[] vehicleIds = vehicleIdResponse.getData().getVehicleIds();
                String v = IdVehicle.getText();
                Vehicle vehicle = new Vehicle(v, access);
                SmartcarResponse<VehicleOdometer> odometerResponse = vehicle.odometer();
                VehicleOdometer odometerData = odometerResponse.getData();
                double odometer = odometerData.getDistance();

                VehicleInfo info = vehicle.info();
                String response = vehicle.vin();
                System.out.println(gson.toJson(info));

                JsonParser parser = new JsonParser();
                JsonObject obj = parser.parse(gson.toJson(info)).getAsJsonObject();
                String id = obj.get("id").getAsString();
                make = obj.get("make").getAsString();
                model = obj.get("model").getAsString();
                year = obj.get("year").getAsString();
                ResVehicle.setText("id = " + id + "\n");
                ResVehicle.append("make = " + make + "\n");
                ResVehicle.append("model = " + model + "\n");
                ResVehicle.append("year = " + year + "\n");
                ResVehicle.append("kms = " + odometer + "\n");
                ResVehicle.append("Vin do carro Ã© " + response + "\n");
                try {
                    SmartcarResponse<VehicleLocation> locationResponse = vehicle.location();
                    VehicleLocation locationData = locationResponse.getData();

                    latLong = locationData.getLatitude() + ", " + locationData.getLongitude();
                    ResVehicle.append("LocalizaÃ§Ã£o do carro: " + latLong + "\n");
                } catch (SmartcarException ex) {
                    ResVehicle.append("O ID do carro que introduziu nÃ£o tem permissÃµes para localizar \n");
                }
                try {
                    SmartcarResponse<VehicleFuel> fuelResponse = vehicle.fuel();
                    VehicleFuel fuelData = fuelResponse.getData();
                    double remainfuel = fuelData.getPercentRemaining() * 100;
                    ResVehicle.append("EstÃ¡ com " + remainfuel + " % de combustivel disponivel e esta dÃ¡ para " + fuelData.getRange() + "kms \n");
                } catch (SmartcarException ex) {
                    ResVehicle.append("O ID do carro que introduziu nÃ£o tem permissÃµes para ver o combustivel \n");
                }
                try {
                    SmartcarResponse<VehicleBattery> batteryResponse = vehicle.battery();
                    VehicleBattery batteryData = batteryResponse.getData();
                    double remainbattery = batteryData.getPercentRemaining() * 100;
                    ResVehicle.append("EstÃ¡ com " + remainbattery + " % de bateria disponivel e esta dÃ¡ para " + batteryData.getRange() + "kms \n");
                } catch (SmartcarException ex) {
                    ResVehicle.append("O ID do carro que introduziu nÃ£o tem permissÃµes para ver a bateria ou este carro nÃ£o Ã© eletrico \n");
                }
                try {
                    SmartcarResponse<VehicleOil> oilResponse = vehicle.oil();
                    VehicleOil oilData = oilResponse.getData();
                    double remainoil = oilData.getLifeRemaining() * 100;
                    ResVehicle.append("EstÃ¡ com " + remainoil + " % de oleo disponivel \n");
                } catch (SmartcarException ex) {
                    ResVehicle.append("O ID do carro que introduziu nÃ£o tem permissÃµes para ver o oleo \n");
                }
                try {
                    SmartcarResponse<VehicleBatteryCapacity> batterycapacityResponse = vehicle.batteryCapacity();
                    VehicleBatteryCapacity batteryCapacityData = batterycapacityResponse.getData();
                       double remainbattery = batteryCapacityData.getCapacity();
                    ResVehicle.append("EstÃ¡ com " + remainbattery + " KW/H \n");
                } catch (SmartcarException ex) {
                    ResVehicle.append("O ID do carro que introduziu nÃ£o tem permissÃµes para ver a Capacidade da bateria ou este carro nÃ£o Ã© eletrico \n");
                }
                try {
                    SmartcarResponse<VehicleTirePressure> tirepressureResponse = vehicle.tirePressure();
                    VehicleTirePressure tirepressureData = tirepressureResponse.getData();

                    ResVehicle.append("Nos pneus da frente, o da direita tem " + tirepressureData.getFrontRight() + " kPA, o da esquerda tem " + tirepressureData.getFrontLeft() + " kPA \n");
                    ResVehicle.append("Nos pneus de tras, o da direita tem " + tirepressureData.getBackRight() + " kPA, o da esquerda tem " + tirepressureData.getBackLeft() + " kPA \n");
                } catch (SmartcarException ex) {
                    ResVehicle.append("O ID do carro que introduziu nÃ£o tem permissÃµes para ver a pressao dos pneus \n");
                }
            } catch (SmartcarException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                ResVehicle.setText("O ID do carro que introduziu nÃ£o estÃ¡ correto ou nÃ£o tem permissoes, tenha atenÃ§Ã£o se nÃ£o hÃ¡ espaÃ§o depois do ultimo numero do ID");
            }

        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            ResVehicle.setText("NÃ£o fizeste o login");
            
        }

    }//GEN-LAST:event_BVehicleActionPerformed

    private void BVehiclesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BVehiclesActionPerformed
        try {
            BufferedReader brTest = new BufferedReader(new FileReader("C:\\Users\\rober\\AppData\\Local\\Temp\\access.txt"));
            access = brTest.readLine();
            try {
                SmartcarResponse<VehicleIds> vehicleIdResponse = AuthClient.getVehicleIds(access);
               
                String[] vehicleIds = vehicleIdResponse.getData().getVehicleIds();
                ResVehicles.setText("");
                ResID.setText("");
                for (String v : vehicleIds) {

                    Vehicle vehicle = new Vehicle(v, access);
                    VehicleInfo info = vehicle.info();
                    System.out.println(gson.toJson(info));
                    JsonParser parser = new JsonParser();
                    JsonObject obj = parser.parse(gson.toJson(info)).getAsJsonObject();
                    String id = obj.get("id").getAsString();
                    String make = obj.get("make").getAsString();
                    String model = obj.get("model").getAsString();
                    String year = obj.get("year").getAsString();
                    ResVehicles.append("id = " + id + "\t");
                    ResVehicles.append("make = " + make + "\t");
                    ResVehicles.append("model = " + model + "\t");
                    ResVehicles.append("year = " + year + "\n");
                    ResID.append("id = " + id + "\n");
                }
                 
            } catch (SmartcarException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            ResVehicles.setText("NÃ£o fizeste o login");
        }
    }//GEN-LAST:event_BVehiclesActionPerformed

    private void BLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BLoginActionPerformed
        // TODO add your handling code here:
        OpenBrowser openBrowser = new OpenBrowser("http://localhost:8000/login");
        resLogin.append("FaÃ§a o login no Brownser!\n");
    }//GEN-LAST:event_BLoginActionPerformed

    private void BResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BResetActionPerformed
        ResVehicle.setText("");
        IdVehicle.setText("");
    }//GEN-LAST:event_BResetActionPerformed

    private void BMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMapaActionPerformed

            OpenBrowser openBrowser = new OpenBrowser("https://www.google.pt/maps/place/" + latLong);
    }//GEN-LAST:event_BMapaActionPerformed

    private void BCarroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCarroActionPerformed
       
        OpenBrowser openBrowser = new OpenBrowser("https://www.google.com/search?q="+make+"+"+model+"+"+year+"&safe=active&sxsrf=ALeKk03HyU23sdcH0z_cnjZcQZgnnEzO3g:1620142623756&source=lnms&tbm=isch&sa=X&ved=2ahUKEwjK38vMrbDwAhX5VRUIHUvVBT0Q_AUoAXoECAEQAw&biw=1879&bih=939");
    }//GEN-LAST:event_BCarroActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BCarro;
    private javax.swing.JButton BLogin;
    private javax.swing.JButton BMapa;
    private javax.swing.JButton BReset;
    private javax.swing.JButton BVehicle;
    private javax.swing.JButton BVehicles;
    private javax.swing.JTextField IdVehicle;
    private javax.swing.JPanel PLogin;
    private javax.swing.JPanel PVehicle;
    private javax.swing.JPanel PVehicles;
    private javax.swing.JTextArea ResID;
    private javax.swing.JTextArea ResVehicle;
    private javax.swing.JTextArea ResVehicles;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JTextArea resLogin;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
